{% extends "ebase.html" %}
{% block content %}
    <div class="module">
        <details>
            <summary class="sum2">
            About Emu86
            </summary>

            <p>
            This is an open source project written by Gene Callahan,
            Abhishek Ramchandran, Varun Chopra, Nathan Conroy,
            and Nanda Kishore Kalidindi.
            The goal is to create a simple learning tool to introduce students to
            assembly language programming in a class on, say, operating systems
            or compilers, where the focus is not assembly language, and actually
            using an assembler would be a distraction from the main theme of the
            course. It includes a (growing) subset of x86 assembler
            instructions. (This is, by the way, Intel assembly language, and
            not AT&amp;T assembly language.)
            </p>

            <details>
                <summary class="sum3">
                    x86 Assembly Guide
                </summary>
                <p>
                    Here is a page from the University of Virginia Computer Science
                    Department that gives a basic guide to x86 assembly language,
                    which we have followed in creating our emulator:
                    <br />
                    <a
                    href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html">
                    Guide to Intel x86 assembly.
                    </a>
                </p>
            </details>
        </details>

        <details>
            <summary class="sum2">
            Sample Programs
            </summary>

            <p>
                Here are some sample programs written in our emulator, as
                illustrations of what can, at the moment, can be accomplished
                with it. (Of course, far lengthier programs are possible, but
                student exercises would typically be brief, like these
                samples.)
            </p>

            <ul class="nested">
                <li>
                    <a href="https://github.com/gcallah/Emu86/blob/master/tests/loop.asm">
                        A simple loop
                    </a>
                </li>

                <li>
                    <a
                        href="https://github.com/gcallah/Emu86/blob/master/tests/power.asm">
                        Raise a number to a power
                    </a>
                </li>

                <li>
                    <a
                        href="https://github.com/gcallah/Emu86/blob/master/tests/data.asm">
                        Declare some variables
                    </a>
                </li>

                <li>
                    <a
                        href="https://github.com/gcallah/Emu86/blob/master/tests/test_control_flow.asm">
                        Exercise control flow instructions
                    </a>
                </li>

                <li>
                    <a
                        href="https://github.com/gcallah/Emu86/blob/master/tests/key_test.asm">
                        Uses our "keyboard interrupt"
                    </a>
                </li>
            </ul>
        </details>

        <details>
            <summary class="sum2">
            The Data Section
            </summary>
        
            <p>
                This section is preceded by the directive ".data". <i>If</i>
                you have a data section, you must start the program section
                with the directive ".text". The data section allows the
                declaration of names for memory locations.
            </p>

<!--include data.txt -->
        </details>

        <details>
            <summary class="sum2">
            Instructions Available
            </summary>

            <p>
                Some of these are only partially done, i.e., some variant of
                an instruciton may not work. We will do our best to note that
                where possible.
                <br>
                In the syntax descriptions, we have:
            </p>
            <ul class="nested">
                <li>con: constant
                <li>lbl: label
                <li>mem: memory location
                    <br>
                    A memory location may be designated by [num], where
                    <i>num</i> is the actual address, or by [reg], where
                    <i>reg</i> holds the memory address.
                <li>reg: register
            </ul>

            <details>
                <summary class="sum3">
                Interrupts
                </summary>
<!--include interrupts.txt -->
            </details>

            <details>
                <summary class="sum3">
                Data Movement
                </summary>
<!--include data_mov.txt -->
            </details>
                
            <details>
                <summary class="sum3">
                Control Flow
                </summary>
<!--include control_flow.txt -->
            </details>

            <details>
                <summary class="sum3">
                Arithmetic and Logic
                </summary>
<!--include arithmetic.txt -->
            </details>
        </details>

        <details>
            <summary class="sum2">
            User Interface Features
            </summary>

            <p>
                Clicking on any register will display its value in binary.
            </p>
        </details>


    </div>
{% endblock content %}
