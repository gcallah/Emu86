{% extends "ebase.html" %}
{% block content %}
    <div class="module">
        <details>
            <summary class="sum2">
            About Emu86
            </summary>

            <p>
            This is an open source project written by Gene Callahan, Abhishek
            Ramchandran, Varun Chopra, Nathan Conroy, Cindy Lee, and Nanda
            Kishore Kalidindi.  The goal is to create a simple learning tool to
            introduce students to assembly language programming in a class on,
            say, operating systems or compilers, where the focus is not
            assembly language, and actually using an assembler would be a
            distraction from the main theme of the course. It includes a
            (growing) subset of x86 assembler instructions. It currently 
            supports 2 x86 flavors: Intel and AT&amp;T assembly language. 
            <br />
            As of right now, we do not cover these AT&amp;T addressing modes: 
            (%ebx, %eax, 2) and var(, 1). If needed, please contact us. 
            </p>

            <details>
                <summary class="sum3">
                    x86 Assembly Guide
                </summary>
                <p>
                    Here is a page from the University of Virginia Computer
                    Science Department that gives a basic guide to Intel x86 
                    assembly language, which we have followed in creating 
                    our emulator:
                    <br />
                    <a
                    href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html">
                    Guide to Intel x86 assembly.
                    </a>
                    <br/> <br/>
                    In addition, here is a page from the Yale FLINT Group that 
                    gives a basic guide to AT&amp;T x86 assembly language. 
                    <br />
                    <a 
                    href="http://flint.cs.yale.edu/cs421/papers/x86-asm/asm.html">
                    Guide to AT&amp;T x86 assembly.
                    </a>
                </p>
            </details>
        </details>

        <details>
            <summary class="sum2">
            Sample Programs
            </summary>

            <p>
                Here are some sample programs written in our emulator, as
                illustrations of what can, at the moment, can be accomplished
                with it. (Of course, far lengthier programs are possible, but
                student exercises would typically be brief, like these
                samples.)
            </p>

            <details> 
                <summary class="sum3">
                    Intel Programs
                </summary>
<!--include sample_programs_intel.txt -->
            </details>

            <details> 
                <summary class="sum3">
                    AT&amp;T Programs
                </summary>
<!--include sample_programs_att.txt -->
            </details>

            <details> 
                <summary class="sum3">
                    MIPS Programs
                </summary>
<!--include sample_programs_mips.txt -->
            </details>
        </details>

        <details>
            <summary class="sum2">
            The Data Section
            </summary>
        
            <p>
                This section is preceded by the directive ".data". <i>If</i>
                you have a data section, you must start the program section
                with the directive ".text". The data section allows the
                declaration of names for memory locations.
            </p>

<!--include data.txt -->
        </details>

        <details>
            <summary class="sum2">
            Instructions Available
            </summary>

            <p>
                Some of these are only partially done, i.e., some variant of
                an instruciton may not work. We will do our best to note that
                where possible.
                <br>
                In the syntax descriptions, we have:
            </p>
            <ul class="nested">
                <li>
                con: constant
                </li>
                <li>
                lbl: label
                </li>
                <li>
                mem: memory location
                    <br>
                    A memory location may be designated by [num], where
                    <i>num</i> is the actual address, or by [reg], where
                    <i>reg</i> holds the memory address.
                </li>
                <li>
                reg: register
                </li>
            </ul>

            <details>
                <summary class="sum3">
                Interrupts
                </summary>
<!--include interrupts.txt -->
            </details>

            <details>
                <summary class="sum3">
                Data Movement
                </summary>
<!--include data_mov.txt -->
            </details>
                
            <details>
                <summary class="sum3">
                Control Flow
                </summary>
<!--include control_flow.txt -->
            </details>

            <details>
                <summary class="sum3">
                Arithmetic and Logic
                </summary>
<!--include arithmetic.txt -->
            </details>
        </details>

        <details>
            <summary class="sum2">
            User Interface Features
            </summary>

            <p>
                Clicking on any register will display its value in binary.
            </p>
        </details>


    </div>
{% endblock content %}
