<hr>
<h4>
             slt
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            SLT reg, reg, reg
</li>
</ul>
<h5>Description</h5>

<p>
            Compares op2 and op3, and sets (right now) the SF and ZF flags.
            It is not clear at this moment how to
            treat the OF and CF flags in Python,
            since Python integer arithmetic never carries or overflows!
            Store the result of SF flag into op1
</p>
<hr>
<h4>
             slti
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            SLTI reg, con, reg
</li>
<li>
            SLTI reg, reg, con
</li>
</ul>
<h5>Description</h5>

<p>
            Compares op2 and op3, and sets (right now) the SF and ZF flags.
            It is not clear at this moment how to
            treat the OF and CF flags in Python,
            since Python integer arithmetic never carries or overflows!
            Store the result of SF flag into op1
</p>
<hr>
<h4>
            J
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            J lbl
</li>
<li>
            J loc
</li>
</ul>
<h5>Description</h5>

<p>
            Performs an unconditional jump to the specified address or label
            without storing anything.
</p>
<hr>
<h4>
            JAL
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            JAL loc
</li>
</ul>
<h5>Description</h5>

<p>
            Performs an uncondition jump to the specified address. Stores the
            current address in register $ra.
</p>
<hr>
<h4>
            Jr
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            Jr reg
</li>
</ul>
<h5>Description</h5>

<p>
            Jumps to the address held by register $ra.
</p>
<hr>
<h4>
             BEQ
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            BEQ reg, reg, con
</li>
</ul>
<h5>Description</h5>

<p>
            Jumps if registers are equal.
</p>
<hr>
<h4>
             BNE
</h4>

<h5>Syntax</h5>

<ul class="nested">
<li>
            BNE reg, reg, con
</li>
</ul>
<h5>Description</h5>

<p>
            Jumps if registers are not equal.
</p>
